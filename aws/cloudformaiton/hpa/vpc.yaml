Parameters:
  Key:
    Description: ""
    Type: AWS::EC2::KeyPair::KeyName
    Default: "example-key"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-VPC"]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A
      VpcId: !Ref VPC
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-B
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public
      VpcId: !Ref VPC
  publicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
  PublicsubnetARoutetableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicsubnetBRoutetableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-A
      VpcId: !Ref VPC
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-B
      VpcId: !Ref VPC  
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-05e122bc58cabecd8 #required
      InstanceType: t2.nano #required
      KeyName: !Ref Key
      LaunchConfigurationName: example
      SecurityGroups:
        - !Ref PublicAutoScalingSecurityGroup
  PublicAutoScalingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: autosacling-public-seucitygroup #required
      GroupName: example
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
      VpcId: !Ref VPC
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /index.html
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Name: example
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP2
      TargetType: instance
      VpcId: !Ref VPC
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: example
      DesiredCapacity: 1
      HealthCheckGracePeriod: 90
      # HealthCheckType: String # (todo) alb
      LaunchConfigurationName: !Ref LaunchConfiguration
      # LoadBalancerNames:
      #   - example
      MaxSize: 2 #required
      # MetricsCollection:
      #   - MetricsCollection
      MinSize: 1 #required
      # ServiceLinkedRoleARN: String # IAM role
      Tags:
        - Key: Environment
          Value: dev
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref TargetGroup
      # TerminationPolicies:
      #   - String
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
  ScalingOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup #required
      EstimatedInstanceWarmup: 30
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 10.0